import torch
from torch import nn
import torch.nn.functional as F

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

class M3_Model(nn.Module):
    def __init__(self):
        super(M3_Model,self).__init__()
        self.conv1 = nn.Conv1d(1,256,80,4, padding=38)
        self.batchnorm1 = nn.BatchNorm1d(256)
        self.maxpool1 = nn.MaxPool1d(4)
        
        self.conv2 = nn.Conv1d(256,256,3, padding=1)
        self.batcnorm2 = nn.BatchNorm1d(256)
        self.maxpool2 = nn.MaxPool1d(4)
        
        self.avgpool = nn.AvgPool1d(500)
        self.FC = nn.Linear(256,10)
        
    def forward(self,x):
        x = self.conv1(x)
        x = F.relu(self.batchnorm1(x))
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = F.relu(self.batcnorm2(x))
        x = self.maxpool2(x)
        x = self.avgpool(x)
        x = x.view(-1,256)
        x = self.FC(x)
        x = F.log_softmax(x, dim=1)
        return x
    
model3 = M3_Model()
model3.to(device)
print(model3)   
print('')
print('*+*'*15)
print('Total Parameters in M3_Model: {}'.format(sum([p.nelement() for p in model3.parameters()])))
print('*+*'*15)


class M5_Model(nn.Module):
    def __init__(self):
        super(M5_Model,self).__init__()
        self.conv1 = nn.Conv1d(1,128,80,4,padding=38)
        self.batchnorm1 = nn.BatchNorm1d(128)
        self.maxpool1 = nn.MaxPool1d(4)
        
        self.conv2 = nn.Conv1d(128,128,3,padding=1)
        self.batchnorm2 = nn.BatchNorm1d(128)
        self.maxpool2 = nn.MaxPool1d(4)
        
        self.conv3 = nn.Conv1d(128,256,3,padding=1)
        self.batchnorm3 = nn.BatchNorm1d(256)
        self.maxpool3 = nn.MaxPool1d(4)
        
        self.conv4 = nn.Conv1d(256,512,3,padding=3)
        self.batchnorm4 = nn.BatchNorm1d(512)
        self.maxpool4 = nn.MaxPool1d(4)
        
        self.avgpool = nn.AvgPool1d(32)
        self.FC = nn.Linear(512,10)
           
    def forward(self,x):
        x = self.conv1(x)
        x = F.relu(self.batchnorm1(x))
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = F.relu(self.batchnorm2(x))
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = F.relu(self.batchnorm3(x))
        x = self.maxpool3(x)
        x = self.conv4(x)
        x = F.relu(self.batchnorm4(x))
        x = self.maxpool4(x)
        x = self.avgpool(x)
        x = x.view(x.size(0),512)
        x = self.FC(x)
        x = F.log_softmax(x,dim=1)
        return x

model5 = M5_Model()
model5.to(device)
print(model5)      
print('')
print('*+*'*15)
print('Total Parameters in M5_Model: {}'.format(sum([i.nelement() for i in model5.parameters()])))
print('*+*'*15)


class M11_Model(nn.Module):
    def __init__(self):
        super(M11_Model,self).__init__()
        self.conv1 = nn.Conv1d(1,64,80,4,padding=38)
        self.batchnorm1 = nn.BatchNorm1d(64)
        self.maxpool1 = nn.MaxPool1d(4)
        
        self.conv2 = nn.Conv1d(64,64,3,padding=1)
        self.batchnorm2 = nn.BatchNorm1d(64)
        self.maxpool2 = nn.MaxPool1d(4)
        self.conv3 = nn.Conv1d(64,64,3,padding=752)
        self.batchnorm3 = nn.BatchNorm1d(64)
        self.maxpool3 = nn.MaxPool1d(4)
        
        self.conv4 = nn.Conv1d(64,128,3,padding=752)
        self.batchnorm4 = nn.BatchNorm1d(128)
        self.maxpool4 = nn.MaxPool1d(4)
        self.conv5 = nn.Conv1d(128,128,3,padding=1)
        self.batchnorm5 = nn.BatchNorm1d(128)
        self.maxpool5 = nn.MaxPool1d(4)
        
        self.conv6 = nn.Conv1d(128,256,3,padding=194)
        self.batchnorm6 = nn.BatchNorm1d(256)
        self.maxpool6 = nn.MaxPool1d(4)
        self.conv7 = nn.Conv1d(256,256,3)
        self.batchnorm7 = nn.BatchNorm1d(256)
        self.maxpool7 = nn.MaxPool1d(4)
        self.conv8 = nn.Conv1d(256,256,3,padding=50)
        self.batchnorm8 = nn.BatchNorm1d(256)
        self.maxpool8 = nn.MaxPool1d(4)
        
        self.conv9 = nn.Conv1d(256,512,3)
        self.batchnorm9 = nn.BatchNorm1d(512)
        self.maxpool9 = nn.MaxPool1d(4)
        self.conv10 = nn.Conv1d(512,512,3)
        self.batchnorm10 = nn.BatchNorm1d(512)
        self.maxpool10 = nn.MaxPool1d(4)
        self.avgpool = nn.AvgPool1d(32)
        
        self.FC = nn.Linear(512,10)
           
    def forward(self,x):
        x = self.conv1(x)
        x = F.relu(self.batchnorm1(x))
        x = self.maxpool1(x)
        x = self.conv2(x)
        x = F.relu(self.batchnorm2(x))
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = F.relu(self.batchnorm3(x))
        x = self.maxpool3(x)
        x = self.conv4(x)
        x = F.relu(self.batchnorm4(x))
        x = self.maxpool4(x)
        x = self.conv5(x)
        x = F.relu(self.batchnorm5(x))
        x = self.maxpool5(x)
        x = self.conv6(x)
        x = F.relu(self.batchnorm6(x))
        x = self.maxpool6(x)
        x = self.conv7(x)
        x = F.relu(self.batchnorm7(x))
        x = self.maxpool7(x)
        x = self.conv8(x)
        x = F.relu(self.batchnorm8(x))
        x = self.maxpool8(x)
        x = self.conv9(x)
        x = F.relu(self.batchnorm9(x))
        x = self.maxpool9(x)
        x = self.conv10(x)
        x = F.relu(self.batchnorm10(x))
        x = self.maxpool10(x)        
        x = x.view(x.size(0),512)
        x = self.FC(x)
        x = F.log_softmax(x,dim=1)
        return x
        
model11 = M11_Model()
model11.to(device)
print(model11)        
print('')
print('*+*'*15)
print('Total Parameters in M11_Model: {}'.format(sum([i.nelement() for i in model11.parameters()])))
print('*+*'*15)

class M18_Model(nn.Module):
    def __init__(self):
        super(M18_Model,self).__init__()
        self.conv1 = nn.Conv1d(1,64,80,4,padding=38)
        self.batchnorm1 = nn.BatchNorm1d(64)
        self.maxpool1 = nn.MaxPool1d(4)

        self.conv2 = nn.Conv1d(64,64,3,padding=1)
        self.batchnorm2 = nn.BatchNorm1d(64)
        self.maxpool2 = nn.MaxPool1d(4)
        self.conv3 = nn.Conv1d(64,64,3,padding=752)
        self.batchnorm3 = nn.BatchNorm1d(64)
        self.maxpool3 = nn.MaxPool1d(4)
        self.conv4 = nn.Conv1d(64,64,3,padding=752)
        self.batchnorm4 = nn.BatchNorm1d(64)
        self.maxpool4 = nn.MaxPool1d(4)
        self.conv5 = nn.Conv1d(64,64,3,padding=752)
        self.batchnorm5 = nn.BatchNorm1d(64)
        self.maxpool5 = nn.MaxPool1d(4)

        self.conv6 = nn.Conv1d(64,128,3,padding=1)
        self.batchnorm6 = nn.BatchNorm1d(128)
        self.maxpool6 = nn.MaxPool1d(4)
        self.conv7 = nn.Conv1d(128,128,3,padding=189)
        self.batchnorm7 = nn.BatchNorm1d(128)
        self.maxpool7 = nn.MaxPool1d(4)
        self.conv8 = nn.Conv1d(128,128,3,padding=189)
        self.batchnorm8 = nn.BatchNorm1d(128)
        self.maxpool8 = nn.MaxPool1d(4)
        self.conv9 = nn.Conv1d(128,128,3,padding=189)
        self.batchnorm9 = nn.BatchNorm1d(128)
        self.maxpool9 = nn.MaxPool1d(4)

        self.conv10 = nn.Conv1d(128,256,3,padding=1)
        self.batchnorm10 = nn.BatchNorm1d(256)
        self.maxpool10 = nn.MaxPool1d(4)
        self.conv11 = nn.Conv1d(256,256,3,padding=50)
        self.batchnorm11 = nn.BatchNorm1d(256)
        self.maxpool11 = nn.MaxPool1d(4)
        self.conv12 = nn.Conv1d(256,256,3,padding=50)
        self.batchnorm12 = nn.BatchNorm1d(256)
        self.maxpool12 = nn.MaxPool1d(4)
        self.conv13 = nn.Conv1d(256,256,3,padding=50)
        self.batchnorm13 = nn.BatchNorm1d(256)
        self.maxpool13 = nn.MaxPool1d(4)

        self.conv14 = nn.Conv1d(256,512,3,padding =1)
        self.batchnorm14 = nn.BatchNorm1d(512)
        self.maxpool14 = nn.MaxPool1d(4)
        self.conv15 = nn.Conv1d(512,512,3,padding =12)
        self.batchnorm15 = nn.BatchNorm1d(512)
        self.maxpool15 = nn.MaxPool1d(4)
        self.conv16 = nn.Conv1d(512,512,3,padding=12)
        self.batchnorm16 = nn.BatchNorm1d(512)
        self.maxpool16 = nn.MaxPool1d(4)
        self.conv17 = nn.Conv1d(512,512,3,padding=1)
        self.batchnorm17 = nn.BatchNorm1d(512)
        self.maxpool17 = nn.MaxPool1d(4)
        self.avgpool = nn.AvgPool1d(1)

        self.FC = nn.Linear(512,10)


    def forward(self,x):
        x = self.conv1(x)
        x = F.relu(self.batchnorm1(x))
        x = self.maxpool1(x)
        
        x = self.conv2(x)
        x = F.relu(self.batchnorm2(x))
        x = self.maxpool2(x)
        x = self.conv3(x)
        x = F.relu(self.batchnorm3(x))
        x = self.maxpool3(x)
        x = self.conv4(x)
        x = F.relu(self.batchnorm4(x))
        x = self.maxpool4(x)
        x = self.conv5(x)
        x = F.relu(self.batchnorm5(x))
        x = self.maxpool5(x)

        x = self.conv6(x)
        x = F.relu(self.batchnorm6(x))
        x = self.maxpool6(x)
        x = self.conv7(x)
        x = F.relu(self.batchnorm7(x))
        x = self.maxpool7(x)
        x = self.conv8(x)
        x = F.relu(self.batchnorm8(x))
        x = self.maxpool8(x)
        x = self.conv9(x)
        x = F.relu(self.batchnorm9(x))
        x = self.maxpool9(x)

        x = self.conv10(x)
        x = F.relu(self.batchnorm10(x))
        x = self.maxpool10(x) 
        x = self.conv11(x)
        x = F.relu(self.batchnorm11(x))
        x = self.maxpool11(x)
        x = self.conv12(x)
        x = F.relu(self.batchnorm12(x))
        x = self.maxpool12(x)
        x = self.conv13(x)
        x = F.relu(self.batchnorm13(x))
        x = self.maxpool13(x)
        x = self.conv14(x)
        x = F.relu(self.batchnorm14(x))
        x = self.maxpool14(x)
        x = self.conv15(x)
        x = F.relu(self.batchnorm15(x))
        x = self.maxpool15(x)
        x = self.conv16(x)
        x = F.relu(self.batchnorm16(x))
        x = self.maxpool16(x)
        x = self.conv17(x)
        x = F.relu(self.batchnorm17(x))
        x = self.maxpool17(x)
        x = self.avgpool(x)
        x = x.view(x.size(0),512)
        x = self.FC(x)
        x = F.log_softmax(x,dim=1)
        return x

model18 = M18_Model()
model18.to(device)   
print('')
print('*+*'*15)
print('Total Parameters in M18_Model: {}'.format(sum([i.nelement() for i in model18.parameters()])))
print('*+*'*15)

